#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Set the colormap condition
"""

from matplotlib.colors import LinearSegmentedColormap
cmapset = LinearSegmentedColormap('cset', {
    'green': [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],
    'red': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 1.0, 1.0)],
    'blue': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],
        })

"""
dendrogram-heatmap making function
"""

def draw_heatmap_dendrogram(a, cmap=cmapset):
    from matplotlib import pyplot as plt
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    from scipy.spatial.distance import pdist
    from scipy.cluster.hierarchy import linkage, dendrogram

    """
    metric = definition of distance
        braycurtis, canberra, chebyshev, cityblock, correlation, cosine, euclidean, hamming, jaccard
    method = linkage method
        single, average, complete, weighted, centroid, median, ward
    """

    metric = ''
    method = ''
    
    ### dendrogram(color_threshold = X); Dendrogram colour threshold

    plt.figure(figsize=(6, 10), dpi=100)
    main_axes = plt.gca()
    divider = make_axes_locatable(main_axes)

    plt.sca(divider.append_axes("left", 1.0, pad=0))
    ylinkage = linkage(pdist(a, metric=metric), method=method, metric=metric)
    ydendro = dendrogram(ylinkage, 
                         orientation="left",
                         no_labels=True,
                         distance_sort=False,
                         color_threshold = 6)
    plt.gca().set_axis_off()
    a = a.loc[[a.index[i] for i in ydendro['leaves']]]

    """
    plt.imshow(); decition of upper/lower of heatmap
    plt.colorbar(pad=X); make a distance
    """

    plt.sca(main_axes)
    plt.imshow(a, aspect='auto', interpolation='none',
               cmap=cmap, vmin=-1, vmax=1)
    plt.colorbar(pad=0.45)
    plt.gca().yaxis.tick_right()
    plt.xticks(range(a.shape[1]), a.columns, rotation=90, size='small')
    plt.yticks(range(a.shape[0]), a.index, size=6)
    plt.gca().xaxis.set_ticks_position('none')
    plt.gca().yaxis.set_ticks_position('none')
    plt.gca().invert_yaxis()
    
import pandas as pd
import sys
import time
from matplotlib import pyplot as plt

sys.path.append(r"~")

### Data cleaning
list = pd.read_csv(r"~")
list2 = list.set_index("~")

draw_heatmap_dendrogram(list2)
plt.savefig("XXXX", dpi=600)
